<!-- 
  Turtlebot is a bit low on horsepower...
  We use openni_camera here as an absolute minimum and only load processing modules as the apps need them.
-->
<launch>
  <arg name="camera"  value="camera"/>
  <arg name="respawn" default="false" />
  <arg     if="$(arg respawn)" name="bond" value="" />
  <arg unless="$(arg respawn)" name="bond" value="--no-bond" />
 
  <!-- Depth registration -->
  <arg name="depth_registration" default="true"/>
  <arg     if="$(arg depth_registration)" name="depth" value="depth_registered" />
  <arg unless="$(arg depth_registration)" name="depth" value="depth" />

  <!-- Throttle -->
  <arg name="data_skip" default="0" />
  
  <!-- Modules -->
  <arg name="load_driver"        default="true"/>
  <arg name="rgb_processing"     default="true"/>
  <arg name="depth_processing"   default="true"/>
  <arg name="scan_processing"    default="true"/>

  <!-- Manager name -->
  <arg     if="$(arg load_driver)" name="manager" value="$(arg camera)_nodelet_manager" />
  <arg unless="$(arg load_driver)" name="manager" value="$(arg camera)_processing_nodelet_manager" />

  <group ns="$(arg camera)">
    <node pkg="nodelet" type="nodelet" name="$(arg manager)" respawn="true" args="manager"/>
    <node if="$(arg load_driver)"
          pkg="nodelet" type="nodelet" name="openni_camera_loader" args="load openni_camera/driver $(arg manager)" respawn="true">
        <rosparam file="$(find iap_bringup)/param/3dsensor.yaml" command="load"/>
        <param name="depth_registration" value="$(arg depth_registration)"/>
	<param name="data_skip" value="$(arg data_skip)" />
    </node>

    <group if="$(arg rgb_processing)">
      <include file="$(find image_proc)/launch/image_proc.launch" ns="rgb">
        <arg name="manager" value="/$(arg camera)/$(arg manager)" /> <!--  Image proc can't seem to resolve if only $(arg manager) is set -->
        <arg name="respawn" value="$(arg respawn)" />
      </include>
    </group>

    <!--                  Depth image processing 
      Look in $(find openni_launch)/launch/includes/depth.launch for hints
      Here we set things up for point cloud processing (follower mainly).
      At some point we may want the xyzrgb point cloud processing nodelet. 
    -->
    <group if="$(arg depth_processing)">
      <node pkg="nodelet" type="nodelet" name="rectify_depth"
            args="load image_proc/rectify /$(arg camera)/$(arg manager) $(arg bond)"
            respawn="$(arg respawn)"
            ns="$(arg depth)">
        <remap from="image_mono"  to="image_raw" />   <!-- Input -->
        <remap from="image_rect"  to="image_rect_raw" />  <!-- Output -->
        <!-- Use nearest neighbor (0) interpolation so we don't streak across depth boundaries -->
        <param name="interpolation" value="0" />
      </node>
      <node pkg="nodelet" type="nodelet" name="points"
            args="load depth_image_proc/point_cloud_xyz /$(arg camera)/$(arg manager) $(arg bond)"
            respawn="$(arg respawn)"
            ns="$(arg depth)">
        <remap from="image_rect" to="image_rect_raw"/>
      </node>
    </group>
    
    <!--                        Laserscan 
      This uses lazy subscribing, so will not activate until scan is requested.
    -->
    <group if="$(arg scan_processing)">
      <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan_loader" args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet $(arg manager)">
        <param name="output_frame_id" value="/$(arg camera)_depth_frame"/>
        <param name="range_min" value="0.6"/>
        <remap from="image" to="/$(arg camera)/$(arg depth)/image_raw"/>
        <remap from="scan" to="/scan" />
      </node>
    </group>
  </group>
</launch>

